.executor-docker: &executor-docker
    tags:
        - docker

.node-image: &node-image
    image: node:9.11.1-alpine

.dependency-npm: &dependency-npm
    dependencies:
        - npm

.dependency-unit: &dependency-unit
    dependencies:
        - npm
        - unit

.only-branches: &only-branches
    except:
        - master
        - develop
        - tags
        - triggers

.not-branches: &not-branches
    only:
        - master
        - develop
        - tags

stages:
    - build
    - compliance-tests
    - security-tests
    - unit-tests
    - quality-tests

npm:
    stage: build
    <<: *executor-docker
    <<: *node-image
    script:
        - HASH=( $( md5sum package.json ) )
        - CACHE=/tmp/${CI_PROJECT_NAME}_${HASH}.tgz
        - if [ -f $CACHE ]; then
              tar -xzf $CACHE;
          else
              rm -f /tmp/${CI_PROJECT_NAME}_*.tgz &&
              npm install &&
              tar -czf $CACHE node_modules;
          fi
    artifacts:
        name: "${CI_PROJECT_NAME}_${CI_JOB_ID}_${CI_COMMIT_SHA}"
        expire_in: 10 mins
        paths:
            - node_modules

commitlint-branch:
    stage: compliance-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-npm
    script:
        - git fetch origin develop --quiet
        - git checkout develop --quiet
        - git reset --hard origin/develop --quiet
        - git checkout - --quiet
        - npm run compliance:commitlint
    <<: *only-branches

commitlint-develop:
    stage: compliance-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-npm
    script:
        - git fetch origin master --quiet
        - git checkout master --quiet
        - git reset --hard origin/master --quiet
        - git checkout - --quiet
        - ./node_modules/.bin/commitlint --from=master --to=HEAD
    <<: *not-branches

eslint:
    stage: compliance-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-npm
    script:
        - npm run compliance:eslint

outdated:
    stage: security-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-npm
    script:
        - npm outdated
    allow_failure: true

nsp:
    stage: security-tests
    <<: *executor-docker
    <<: *node-image
    script:
        - npm run security:nsp

blackduck:
    stage: security-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-npm
    script:
        - blackduck ${CI_PROJECT_NAME} ${CI_COMMIT_REF_NAME}
    <<: *not-branches

blackduck-branch:
    stage: security-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-npm
    script:
        - blackduck ${CI_PROJECT_NAME} ${CI_COMMIT_REF_NAME}
    <<: *only-branches
    when: manual

checkmarx:
    stage: security-tests
    <<: *executor-docker
    <<: *node-image
    script:
        - checkmarx ${CI_PROJECT_NAME}@${CI_PROJECT_NAMESPACE}#${CI_COMMIT_REF_NAME} Engineering
    <<: *not-branches

checkmarx-branch:
    stage: security-tests
    <<: *executor-docker
    <<: *node-image
    script:
        - checkmarx ${CI_PROJECT_NAME}@${CI_PROJECT_NAMESPACE}#${CI_COMMIT_REF_NAME} Engineering
    <<: *only-branches
    when: manual

unit:
    stage: unit-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-npm
    script:
        - npm run unit:test
    artifacts:
        expire_in: 10 mins
        paths:
            - .coverage/unit/lcov.info
    coverage: /^Lines\s*:\s(\d+(?:.\d+)?%)/

sonarjs:
    stage: quality-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-npm
    script:
        - npm run quality:sonarjs

sonar-scanner:
    stage: quality-tests
    <<: *executor-docker
    <<: *node-image
    <<: *dependency-unit
    script:
        - sed -i.bak -e "s|^SF:\(.*/[[:digit:]]\{1,\}/.*/\)|SF:$( pwd )/|g" .coverage/unit/lcov.info
        - npm run quality:sonar-scanner
    <<: *not-branches
